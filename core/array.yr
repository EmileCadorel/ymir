import std.traits;

extern (C) GC_malloc (ulong) : p!(void);

def cstArray (len : ulong, size : ubyte) : p!(void) {
    let array = GC_malloc (len * size);
    return (len, array).ptr;
}

def opIndex if (isDecimal!(I)) (T of [U], U, I) (a : T, rng : r!(I)) : [U] {    
    if (rng.fst < rng.scd) {
        let len = rng.scd - rng.fst;
        let aux = a.tupleof;
        let ret = (cast:ulong (len),
                   cast:p!(ubyte) (aux.1)
                       + (cast:ulong (rng.fst) * U.sizeof));
        
        return cast:[U] (ret);
    } else if (rng.fst == rng.scd) {
        return [U ; 0UL];
    } else 
        return null;
}

def opBinary('+', T of [U], U) (a : T, b : T) : T {
    let c = [U ; a.length + b.length];    
    for it in 0U .. a.length
        c [it] = a [it];

    for it in 0U .. b.length
        c [it + a.length] = b [it];

    return c;        
}

def opAssign ("+=", T of [U], U) (ref a : T, b : T) : ref T {
    a = a + b;
    return a;
}
