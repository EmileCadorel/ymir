import std.math;
import std.algorithm.comparaison;
import std.conv;
import std.traits;

def opTest ('>') (a : int, b : string) : bool {
    return true;
}

def opEquals (const a : string, const b : string) : bool {
    if (a.length != b.length) return false;
    for (it in 0UL .. a.length)
	if (a [it] != b [it]) return false;
    return true;
}

def opIndex (str : string) : [char] {
    return cast:[char] (str);
}

def opIndex if (isDecimal!(T)) (T) (str : string, rng : r!(T)) {
    return cast:string (str[][rng]);
}

def opTest ('<') (const a : string, const b : string) : bool {
    for (it in 0UL .. min (a.length, b.length)) {
	if (a [it] > b [it]) return false;
	else if (a [it] < b [it]) return true;
    }
    return false;
}    

def opTest ('>') (const a : string, const b : string) : bool {
    for (it in 0UL .. min (a.length, b.length)) {
	if (a [it] < b [it]) return false;
	else if (a [it] > b [it]) return true;
    }
    return false;
}    

def opTest ("<=") (a : string, b : string) : bool {
    for (it in 0UL .. min (a.length, b.length)) {
	if (a [it] > b [it]) return false;
	else if (a [it] < b [it]) return true;
    }
    return true;
}    

def opTest (">=") (a : string, b : string) : bool {
    for (it in 0UL .. min (a.length, b.length)) {
	if (a [it] < b [it]) return false;
	else if (a [it] > b [it]) return true;
    }
    return true;
}    

def opBinary ('+') (a : string , b : char) {
    return a + cast:string ([b]);
}

def opBinary ('+') (a : string , b : string) : string {
    let aux = [char ; a.length + b.length];
    for it in 0U .. a.length
        aux [it] = a [it];

    for it in 0U .. b.length
        aux [it + a.length] = b [it];
    return cast:string (aux);
}

private def creator () {
    let useless = "a" + 'b';
    let b = "a" < "b";
}

def getArgs (argc : int, argv : p!(p!char)) : [string] {    
    let ret = [string; 0UL];
    for (it in 0 .. argc) {
	ret = ret + [(*(argv + (it * 8))).to!string];
    }
    return ret;
}

def dup (str : string) : string {
    let aux = [char ; str.length];
    for it in 0U .. str.length
        aux [it] = str [it];
    return cast:string (aux);
}

def cstString (len : ulong, ca : p!char) : string {    
    let aux = [char ; len];
    for it in 0U .. len {
        aux [it] = *(ca + it);
    }
    
    return cast:string (aux);
}

