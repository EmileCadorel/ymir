import std.conv;
import std.array;

struct E {
    name : string
}

impl E {

    def cst (self, name : string) {
        self.name = name;
    }

    def toString (self, i : int) {
        return "";
    }
    
}

struct V {
}

impl E for V {

    def new (name) {
        let v = V ();
        v.super.cst (name);
        return v;
    }

    over toString (self, i : int) {
        return self.to!string;
    }
    
}

struct Decl {
    name : string
}

impl Decl {

    def cst (self, name : string) {
        self.name = name;
    }
    
    def print (self) {
    }
    
}

struct F {
    test : [V]
}

impl Decl for F {

    def new (name) {
        let f = F ([]);
        f.super.cst (name);
        return f;
    }

    def add (self, e : V) {
        self.test.insertBack (e);
    }

    over print (self) {
        println (self);
    }
}

def main () {
    let a = F::new ("test");
    for it in 0 .. 10 {
        let i = it.to!string;
        let c = V::new (i); 
       // a.add (c);
    }
    a.print ();
}
