import std.conv;

struct Object { type : int }
impl Object {
    def self (self, a : int) {
        self.type = a;
    }
}

def castTo (T) (a : Object) {
    if (T::id() == a.type) return cast:T (a);
    else return null;
}


struct Test {
    a : int
}

impl Object for Test {
    def new () {
        let a = Test (0);
        a.super.self (Test::id ());
        return a;
    }

    def id () {
        return 1;
    }
}

struct Michel {
    b : int
}

impl Object for Michel {    
    def new () {
        let a = Michel (234);
        a.super.self (Michel::id ());
        return a;
    }

    def id () {
        return 2;
    }    
}



def main () {
    let a = Object ();
    a = Test::new ();    
    println (a.castTo!Test);
    a = Michel::new ();
    let b = a.castTo!Test;
}
