import std.conv;

struct Obj {a : int}
impl Obj {

    def new () {
        return Obj ();
    }

    def test (self, a : t!int) {
        println ("Obj ", a.to!string);
    }

    def test2 (self, a : int, b : int) {
        println (a * b);
    } 
    
}

struct MyObj {}
impl Obj for MyObj {

    def new () {
        return MyObj ();
    }
    
    over test (self, a : t!(int)) {
        println ("MyObj ", a.to!string);
    }

    over test2 (self, a : int, b : int) {
        println (a + b);
    }
    
}

def foo (ref a) {
    a.test2 (1, 2);
}


def main () {
    let a = [Obj; 1U];
    a [0] = MyObj::new ();
    foo (a [0]);
}
