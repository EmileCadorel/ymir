
enum 
| E :          2.71828182845904523542816810799394
| LOG2T :      3.32192809488736234780834055690946
| LOG2E :      1.44269504088896340738765178279834
| LOG2 :       0.30102999566398119522564642835949
| LOG10E :     0.43429448190325182764547941316469
| LN2 :        0.69314718055994530942869047418498
| LN10 :       2.30258509299404568403633886131132
| PI :         3.14159265358979323851280895940619
| PI_2 :       1.57079632679489661925640447970309
| PI_4 :       0.78539816339744830962820223985155
| M_1_PI :     0.31830988618379067153817477131561
| M_2_PI :     0.63661977236758134307634954263122
| M_2_SQRTPI : 1.12837916709551257384794992200128
| SQRT2 :      1.41421356237309504876378807303183
| SQRT1_2 :    0.70710678118654752438189403651592
-> Math;

/**
  Retourne la valeur absolue d'un nombre
 **/
def abs (value) {
  if (value < 0)
    return -value;
  return value;
}

public extern (C) cos (a : float) : float;
public extern (C) sin (a : float) : float;
public extern (C) tan (a : float) : float;

public extern (C) acos (a : float) : float;
public extern (C) asin (a : float) : float;
public extern (C) atan (a : float) : float;




def pow (x, n) {
    let aux = x;
    for (i in 0 .. (n - 1)) 
	aux = aux * x;
    return aux;
}

/**
   Retourne le nombre x avec n chiffres après la virgule
 */
def round (x, n) : float {
    for (i in 0 .. n)
	x *= 10.;
    let aux = cast:int(x);
    let res = cast:float(aux);
    for (i in 0 .. n)
	res /= 10.;
    return res;
}

def sqrt (f : float) : float {
    return (f).sqrt;
}

/**
   Retourne la racine carré d'un nombre avec une précision de 2
 **/
def sqrt (value) : float {
    if (value < 0) {
	return -1.;
    }
    
    let x = 1.;
    for (i in 0 .. 2) {  
	x = (x + value / x) / 2.;
    }
    
    return x;
}

/**
   Retourne la racine carré d'un nombre

   Params:
      prec = précision désirée
 **/
def sqrt(value, prec : int) : float {
  if (value < 0)
    return -1.;

  let x = 1.;
  for (i in 0 .. prec) 
      x = (x + value / x) / 2.;  

  return x;
}

/**
   Retourne la racine cubique avec une précision de 2
 **/
def cqrt(value) : float {
  if (value < 0)
    return -1.;

  let x = 1.;
  for (i in 0 .. 2) {
      x = (x + (cast:float(value) / (x*x))) / 2.;
  }
  
  return x;
}

def cqrt(value, prec : int) : float {
  if (value < 0)
    return -1.;

  let x = 1.;
  for (i in 0 .. prec) {
      x = (x + (cast:float(value) / (x*x))) / 2.;
  }
  
  return x;
}

/**
   Retourne le factoriel du nombre
 */
def facto(x : int) : int {
    let n = x;
    let aux = n - 1;
    for (i in 0 .. (n - 1)) {
	x *= aux;
	aux--;
    }
    return x;
}

