import std.string;
import std.algorithm.searching, std.array;

enum : byte
| F_OK : 0B
| X_OK : 1B
| W_OK : 2B
| R_OK : 4B
-> FilePermission;

enum
| ReadForUser : 256
| WriteForUser : 128
| ExecForUser : 64
| RWXForUser : 448
| ReadForGroup : 32
| WriteForGroup : 16
| ExecForGroup : 8
| RWXForGroup : 56
| ReadForOthers : 4
| WriteForOthers : 2
| ExecForOthers : 1
| RWXForOthers : 7
| SetUserId : 2048
| SetGroupId : 1024
| Sticky : 512
-> AccessPerm;

enum : byte
| File : 0B
| Dir : 1B
-> FileType;

extern (C) access (a : ptr!char, int) : int;

def exists (name : string) : bool {
    if (access (name.toStringz.ptr, cast:int(FilePermission::F_OK)) != -1) return true;
    return false;    
}

extern (C) opendir (a:ptr!char) : ptr!void;
extern (C) closedir (a:ptr!void);

def isDir (name : string) : bool {
    let name_ = name.toStringz.ptr;
    let dir = opendir (name_);
    if (dir !is null) {
	closedir (dir);
	return true;
    } else return false;
}

extern (C) fopen (a:ptr!char, b:ptr!char) : ptr!void;
extern (C) fclose (a:ptr!void);

def isFile (name : string) : bool {
    let name_ = name.toStringz.ptr;
    let file = fopen (name_, "r\0".ptr);
    if (file !is null) {
	fclose (file);
	return true;
    } else return false;    
}

extern (C) rename (a:ptr!char, b:ptr!char) : int;

def rename (old : string, new_ : string) : bool {
    if (rename (old.toStringz.ptr, new_.toStringz.ptr) == 0)
	return true;
    else return false;	
}

extern (C) getcwd (a:ptr!char, size:int) : int;

def getcwd () : string {
    let buf = cast:string ([char ; 1024UL]);
    getcwd (buf.ptr, cast:int(char.sizeof) * 1024);
    return (buf).substr (0, buf[].find ('\0'));
}

extern (C) chdir (a : ptr!char) : int;

def chdir (path : string) : bool {
    if (chdir (path.toStringz.ptr)) {
	return true;
    } return false;
}

// struct dirent {
//     ino_t          d_ino; 8       /* numéro d'inœud */
//     off_t          d_off;  8     /* décalage jusqu'à la dirent suivante */
//     unsigned short d_reclen; 2    /* longueur de cet enregistrement */
//     unsigned char  d_type;    1  /* type du fichier */
//     char           d_name[256]; /* nom du fichier */
// };

extern (C) readdir (a : ptr!void) : ptr!byte;
def dirEntries (path : string) : [string] {
    import std.conv, std.stdio;
    let dir = opendir (path.toStringz.ptr);
    let entry = readdir (dir);
    let res = [string; 0UL];
    while (entry !is null) {
	let name = to!(string) (cast:ptr!(char) (entry + 19));	
	if ((entry + 18).byte == 4)
	    res = res + [name + "/"];
	else res = res + [name];
	entry = readdir (dir);
    }
    return res;
}

extern (C) mkdir (a : ptr!char, mode : int) : int;

def mkdir (name : string, mode : int) : bool {
    let ret = mkdir (name.toStringz.ptr, mode);
    return ret == 0;
}

def mkdir (name : string) : bool {
    let ret = mkdir (name.toStringz.ptr,
		     (AccessPerm::RWXForUser | AccessPerm::RWXForGroup) |
		     (AccessPerm::ReadForOthers | AccessPerm::ExecForOthers)		     
    );
    return ret == 0;
}

def mkdirRecurse (name : string) : bool {
    let path = name.split ('/');
    let current = '';
    for (it in 0UL .. path.length) {
	current +=  path [it] + "/";
	if (!exists (current))
	    if !mkdir (current) return false;
    }
    return true;
}

extern (C) rmdir (name : ptr!char);

def rmdir (name : string) {
    rmdir (name.toStringz.ptr);
}

def tree (path, dec) : void {
    import std.stdio;
    let res = dirEntries (path);
    for (it in 0UL .. res.length) {
	if (!(res [it] == '../') && !(res [it] == './')) {
	    for (_it in 0 .. dec) {
		if (_it % 4 == 0) print ('|');
		print (' ');
	    }
	    
	    println ('|-', res [it]);

	    if (isDir (path + res [it])) {
		test (path + res [it], dec + 4);
	    }
	}
    }    
}
