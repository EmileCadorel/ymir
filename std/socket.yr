import std.conv;
import std.stdio._;

public extern (C) socket (domain : int, type : int, protocol : int) : int;
extern (C) perror (const text : p!char);

extern (C) my_bind (sock : int, family : int, port : int, s_addr : int) : int;
public extern (C) listen (sock : int, nb : int) : int;
extern (C) my_accept (sock : int, const addr : p!(p!char), const port : p!int) : int;
extern (C) printf (const str : p!char, ...);
extern (C) send (sock : int, const msg : p!char, len : ulong, flags : int);
public extern (C) close (what : int);

extern (C) recv (sock : int, const buf : p!void, len : uint, flags : int) : uint;
extern (C) malloc (size : uint) : p!void;
extern (C) free (const a : p!void);

struct
| family : int
| port : int
| s_addr : int
-> sockaddr_in;

enum : int
| AF_INET : 2
| SOCK_STREAM : 1
| INADDR_ANY : 0
-> SockEnum;


def perror (str : string) {
    perror (str.ptr);
}

def bind (ref sock : int, self : sockaddr_in) : int {
    return my_bind (sock, self.family, self.port, self.s_addr);
}

def accept (ref sock : int, ref addr : string, ref port : int) : int {
    let s_addr = p!(char).init, s_port = int.init;
    let clientfd = my_accept (sock, &s_addr, &s_port);
    port = s_port;
    addr = to!(string) (s_addr);
    return clientfd;
}

def send (sock : int, msg : string) {
    send (sock, msg.ptr, msg.length, 0);
}

def recv (sock : int, ref msg : string) : uint {
    let str = malloc (1024u * char.sizeof);
    let len = recv (sock, str, 1024u, 0);
    if (len > 0u)
	msg = to!(string) (cast:p!(char)(str));
    free (str);
    return len;
}

def recv (sock : int, ref msg : string, len : uint) {
    let str = malloc (len * char.sizeof);
    len = recv (sock, str, len, 0);
    if (len > 0u) 
	msg = to!(string) (cast:p!(char)(str));
    free (str);
    return len;
}
