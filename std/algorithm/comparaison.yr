import std.traits;

def min (T) (a : T, b : T) {
    if (a < b) return a;
    return b;
}

def max if (isDecimal!(T) ())
    (T) (a : T, b : T) {
	if (a < b) return b;
	return a;
    }

def clamp (val, lower, upper) {
    return max (lower, min (upper, val));
}

def isPermutation (T) (a : [T], b : [T]) : bool {
    import std.algorithm.searching;
    if (a.length != b.length) return false;
    for (it in 0UL .. a.length) {
	if (count (a, a [it]) != count (b, a [it])) return false;
    }
    return true;
}


def isPermutation  (a : string, b : string) : bool {
    import std.algorithm.searching;
    return isPermutation (a [], b []);
}

def match if (is (T2 : function))
    (T, T2) (params : T, fst : T2) {
	static if (is (fst.paramTuple : T)) {	    
	    static if (is (fst.retType : void))
		fst (expand (params));
	    else return fst (expand (params));
	}
    }

def match if (is (T2 : function))
    (T, T2) (params : T, fst : T2, next) {
	static if (is (fst.paramTuple : T))
	    static if (is (fst.retType : void))
		fst (expand (params));
	    else return fst (expand (params));
	else {
	    static if (is (match (params, expand (next)) : void))		
		match (params, expand (next));
	    else return match (params, expand (next));
	}
    }


def finalMatch if (is (T2 : function))
    (T, T2) (params : T, fst : T2) {
	static if (is (fst.paramTuple : T)) {	    
	    static if (is (fst.retType : void))
		fst (expand (params));
	    else return fst (expand (params));
	}
	else static assert (false);			 
    }

def finalMatch if (is (T2 : function))
    (T, T2) (params : T, fst : T2, next) {
	static if (is (fst.paramTuple : T))
	    static if (is (fst.retType : void))
		fst (expand (params));
	    else return fst (expand (params));
	else {
	    static if (is (finalMatch (params, expand (next)) : void))		
		finalMatch (params, expand (next));
	    else return finalMatch (params, expand (next));
	}
    }


