import std.algorithm.comparaison, std.array;
import std.conv;
import core.array;

def all (T) (call : fn (T)->bool, const b : [T]) {
    for (it in b) {
	if (!call (it)) return false;
    }
    return true;
}

def any (T) (call : fn (T)->bool, const b : [T]) {
    for (it in b)
	if (call (it)) return true;
    return false;
}

def countUntil (T) (const a : [T], const b : [T]) {
    for (it in 0UL .. (a.length - (b.length - 1UL))) {
	let eq = true;
	for (it_ in 0UL .. b.length) {
	    if (a[it + it_] != b [it_]) {
		eq = false;
		break;
	    }
	}
	if (eq) return it;
    }
    return a.length;
}

/**
   Compte le nombre d'éléments qui valide le prédicat
   Params:
   call = la fonction lambda du prédicat
   b = le tableau à tester
   Returns: le nombre d'élément qui valide le prédicat
 */
def count (T) (call : fn (T)->bool, const b : [T]) {
    let nb = ulong.init;
    for (it in b) {
	if (call (it))
	    nb ++;
    }
    return nb;
}

/**
   Compte le nombre d'éléments qui sont égale à la b
   Params:
   a = le tableau d'éléments
   b = l'élément qui va être égale
   Returns: le nombre d'élément égale à b
 */
def count (T) (const a : [T], const b : T) {
    let nb = ulong.init;
    for (it in a) {
	if (it == b) nb ++;
    }
    return nb;
}

/**
   On peut trouver b dans a
 */
def canFind (T) (const a : [T], const b : [T]) {
    for (it in 0UL .. (a.length - (b.length - 1UL))) {
	let eq = true;
	for (it_ in 0UL .. b.length) {
	    if (a[it + it_] != b [it_]) {
		eq = false;
		break;
	    }
	}
	if (eq) return true;
    }
    return false;
}

def commonPrefix (T of [U], U) (a : T, b : T) : T {
    let nb = 0L;
    for (it in 0UL .. min (a.length, b.length)) {
	if (a [it] != b [it]) {
	    return a [0L .. nb];
	} else nb ++;
    }
    return a;
}

def commonPrefix (const a : string, const b : string) : string {
    return commonPrefix (a [], b []).to!string;
}

def endsWith (T) (const a : [T], const b : [T]) : bool {
    if (b.length > a.length) return false;
    for (it in 0UL .. b.length) {
	if (a [(a.length - b.length) + it] != b [it])
	    return false;
    }
    return true;    
}

def endsWith (const a : string, const b : string) : bool {
    return endsWith (a[], b[]);
}

def find (T) (const a : [T], b : T) : long {
    for (it in 0UL .. a.length) {
	if (a [it] == b) return cast:long (it);
    }
    return -1;    
}

def find (T) (const a : [T], b : T, call : fn (T, T)->bool) : long {
    for (it in 0UL .. a.length) {
	if (call (a [it], b)) return cast:long (it);
    }
    return -1;    
}

def minCount (T) (const a : [T]) : tuple!(T, int) {
    let nb = 0, min = T.max;
    for (it in 0UL .. a.length) {
	if (a [it] < min) {
	    nb = 1;
	    min = a [it];
	} else if (a [it] == min) {
	    nb ++;
	}
    }
    return (min, nb);
}

def maxCount (T) (const a : [T]) : tuple!(T, int) {
    let nb = 0, max = T.min;
    for (it in 0UL .. a.length) {
	if (a [it] > max) {
	    nb = 1;
	    max = a [it];
	} else if (a [it] == max) {
	    nb ++;
	}
    }
    return (max, nb);    
}

def minElement (T) (const a : [T]) : T {
    let min = T.max;
    for (it in 0UL .. a.length) {
	if (a [it] < min) {
	    min = a [it];
	}
    }
    return min;    
}

def minIndex (T) (const a : [T]) : long {
    let min = T.max, index = -1L;
    for (it in 0UL .. a.length) {
	if (a [it] < min) {
	    min = a [it];
	    index = cast:long (it);
	}
    }
    return index;    
}

def maxElement (T) (const a : [T]) : T {
    let max = T.min;
    for (it in 0UL .. a.length) {
	if (a [it] > max) {
	    max = a [it];
	}
    }
    return max;    
}

def maxIndex (T) (const a : [T]) : long {
    let max = T.min, index = -1L;
    for (it in 0UL .. a.length) {
	if (a [it] > max) {
	    max = a [it];
	    index = cast:long (it);
	}
    }
    return index;    
}

