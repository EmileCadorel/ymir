
extern (C) pthread_create (th : p!ulong, attr : p!void,
                           fun : fn (p!void)->void, data : p!void);

extern (C) pthread_mutex_lock (mut : p!(void));
extern (C) pthread_mutex_unlock (mut : p!(void));

extern (C) pthread_join (th : ulong, attr : p!void);
extern (C) pthread_cancel (th : ulong);

struct Thread {
    id : ulong
}

def thread (T) (fun : fn (T)->void, data) {
    let ret = 0UL;
    let aux = cast:fn (p!(void))->void (fun);
    pthread_create (&ret, null, aux, data.ptr);
    return Thread (ret);
}

def thread (fun : fn ()->void) : Thread {
    let ret = 0UL;
    let aux = cast:fn (p!(void))->void (fun);
    pthread_create (&ret, null, aux, null);
    return Thread (ret);
}

struct Mutex  {
    padd1 : ulong,
    padd2 : ulong,
    padd3 : ulong,
    padd4 : ulong,
    padd5 : ulong
} // 5 * 8 = 40

def lock (mut : Mutex) {
    pthread_mutex_lock (mut.ptr);
}

def unlock (mut : Mutex) {
    pthread_mutex_unlock (mut.ptr);
}

def join (th : Thread) {
    pthread_join (th.id, null);
}

def cancel (th : Thread) {
    pthread_cancel (th.id);
}

